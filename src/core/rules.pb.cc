// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rules.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rules.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GraphSubst {

namespace {

const ::google::protobuf::Descriptor* Parameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tensor_reflection_ = NULL;
const ::google::protobuf::Descriptor* Operator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Operator_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rule_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuleCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuleCollection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rules_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_rules_2eproto() {
  protobuf_AddDesc_rules_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rules.proto");
  GOOGLE_CHECK(file != NULL);
  Parameter_descriptor_ = file->message_type(0);
  static const int Parameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, value_),
  };
  Parameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Parameter_descriptor_,
      Parameter::default_instance_,
      Parameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(Parameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, _internal_metadata_),
      -1);
  Tensor_descriptor_ = file->message_type(1);
  static const int Tensor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tensor, opid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tensor, tsid_),
  };
  Tensor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Tensor_descriptor_,
      Tensor::default_instance_,
      Tensor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tensor, _has_bits_[0]),
      -1,
      -1,
      sizeof(Tensor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tensor, _internal_metadata_),
      -1);
  Operator_descriptor_ = file->message_type(2);
  static const int Operator_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operator, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operator, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operator, para_),
  };
  Operator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Operator_descriptor_,
      Operator::default_instance_,
      Operator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operator, _has_bits_[0]),
      -1,
      -1,
      sizeof(Operator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operator, _internal_metadata_),
      -1);
  MapOutput_descriptor_ = file->message_type(3);
  static const int MapOutput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutput, srcopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutput, dstopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutput, srctsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutput, dsttsid_),
  };
  MapOutput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapOutput_descriptor_,
      MapOutput::default_instance_,
      MapOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutput, _has_bits_[0]),
      -1,
      -1,
      sizeof(MapOutput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutput, _internal_metadata_),
      -1);
  Rule_descriptor_ = file->message_type(4);
  static const int Rule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, srcop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, dstop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, mappedoutput_),
  };
  Rule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Rule_descriptor_,
      Rule::default_instance_,
      Rule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, _has_bits_[0]),
      -1,
      -1,
      sizeof(Rule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, _internal_metadata_),
      -1);
  RuleCollection_descriptor_ = file->message_type(5);
  static const int RuleCollection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleCollection, rule_),
  };
  RuleCollection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RuleCollection_descriptor_,
      RuleCollection::default_instance_,
      RuleCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleCollection, _has_bits_[0]),
      -1,
      -1,
      sizeof(RuleCollection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleCollection, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rules_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Parameter_descriptor_, &Parameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Tensor_descriptor_, &Tensor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Operator_descriptor_, &Operator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapOutput_descriptor_, &MapOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rule_descriptor_, &Rule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RuleCollection_descriptor_, &RuleCollection::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rules_2eproto() {
  delete Parameter::default_instance_;
  delete Parameter_reflection_;
  delete Tensor::default_instance_;
  delete Tensor_reflection_;
  delete Operator::default_instance_;
  delete Operator_reflection_;
  delete MapOutput::default_instance_;
  delete MapOutput_reflection_;
  delete Rule::default_instance_;
  delete Rule_reflection_;
  delete RuleCollection::default_instance_;
  delete RuleCollection_reflection_;
}

void protobuf_AddDesc_rules_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_rules_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013rules.proto\022\nGraphSubst\"\'\n\tParameter\022\013"
    "\n\003key\030\001 \002(\005\022\r\n\005value\030\002 \002(\005\"$\n\006Tensor\022\014\n\004"
    "opId\030\001 \002(\005\022\014\n\004tsId\030\002 \002(\005\"`\n\010Operator\022\014\n\004"
    "type\030\001 \002(\005\022!\n\005input\030\002 \003(\0132\022.GraphSubst.T"
    "ensor\022#\n\004para\030\003 \003(\0132\025.GraphSubst.Paramet"
    "er\"O\n\tMapOutput\022\017\n\007srcOpId\030\001 \002(\005\022\017\n\007dstO"
    "pId\030\002 \002(\005\022\017\n\007srcTsId\030\003 \002(\005\022\017\n\007dstTsId\030\004 "
    "\002(\005\"}\n\004Rule\022#\n\005srcOp\030\001 \003(\0132\024.GraphSubst."
    "Operator\022#\n\005dstOp\030\002 \003(\0132\024.GraphSubst.Ope"
    "rator\022+\n\014mappedOutput\030\003 \003(\0132\025.GraphSubst"
    ".MapOutput\"0\n\016RuleCollection\022\036\n\004rule\030\001 \003"
    "(\0132\020.GraphSubst.Rule", 460);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rules.proto", &protobuf_RegisterTypes);
  Parameter::default_instance_ = new Parameter();
  Tensor::default_instance_ = new Tensor();
  Operator::default_instance_ = new Operator();
  MapOutput::default_instance_ = new MapOutput();
  Rule::default_instance_ = new Rule();
  RuleCollection::default_instance_ = new RuleCollection();
  Parameter::default_instance_->InitAsDefaultInstance();
  Tensor::default_instance_->InitAsDefaultInstance();
  Operator::default_instance_->InitAsDefaultInstance();
  MapOutput::default_instance_->InitAsDefaultInstance();
  Rule::default_instance_->InitAsDefaultInstance();
  RuleCollection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rules_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rules_2eproto {
  StaticDescriptorInitializer_rules_2eproto() {
    protobuf_AddDesc_rules_2eproto();
  }
} static_descriptor_initializer_rules_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Parameter::kKeyFieldNumber;
const int Parameter::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Parameter::Parameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GraphSubst.Parameter)
}

void Parameter::InitAsDefaultInstance() {
}

Parameter::Parameter(const Parameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GraphSubst.Parameter)
}

void Parameter::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parameter::~Parameter() {
  // @@protoc_insertion_point(destructor:GraphSubst.Parameter)
  SharedDtor();
}

void Parameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Parameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parameter_descriptor_;
}

const Parameter& Parameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rules_2eproto();
  return *default_instance_;
}

Parameter* Parameter::default_instance_ = NULL;

Parameter* Parameter::New(::google::protobuf::Arena* arena) const {
  Parameter* n = new Parameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSubst.Parameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Parameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Parameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(key_, value_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GraphSubst.Parameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GraphSubst.Parameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GraphSubst.Parameter)
  return false;
#undef DO_
}

void Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GraphSubst.Parameter)
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GraphSubst.Parameter)
}

::google::protobuf::uint8* Parameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GraphSubst.Parameter)
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSubst.Parameter)
  return target;
}

int Parameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GraphSubst.Parameter)
  int total_size = 0;

  if (has_key()) {
    // required int32 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());
  }

  if (has_value()) {
    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  return total_size;
}
int Parameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSubst.Parameter)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());

    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Parameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Parameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Parameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Parameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Parameter)
    MergeFrom(*source);
  }
}

void Parameter::MergeFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Parameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Parameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameter::CopyFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Parameter::Swap(Parameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Parameter::InternalSwap(Parameter* other) {
  std::swap(key_, other->key_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Parameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parameter_descriptor_;
  metadata.reflection = Parameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Parameter

// required int32 key = 1;
bool Parameter::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Parameter::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Parameter::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Parameter::clear_key() {
  key_ = 0;
  clear_has_key();
}
 ::google::protobuf::int32 Parameter::key() const {
  // @@protoc_insertion_point(field_get:GraphSubst.Parameter.key)
  return key_;
}
 void Parameter::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:GraphSubst.Parameter.key)
}

// required int32 value = 2;
bool Parameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Parameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Parameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Parameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
 ::google::protobuf::int32 Parameter::value() const {
  // @@protoc_insertion_point(field_get:GraphSubst.Parameter.value)
  return value_;
}
 void Parameter::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:GraphSubst.Parameter.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tensor::kOpIdFieldNumber;
const int Tensor::kTsIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tensor::Tensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GraphSubst.Tensor)
}

void Tensor::InitAsDefaultInstance() {
}

Tensor::Tensor(const Tensor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GraphSubst.Tensor)
}

void Tensor::SharedCtor() {
  _cached_size_ = 0;
  opid_ = 0;
  tsid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tensor::~Tensor() {
  // @@protoc_insertion_point(destructor:GraphSubst.Tensor)
  SharedDtor();
}

void Tensor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tensor_descriptor_;
}

const Tensor& Tensor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rules_2eproto();
  return *default_instance_;
}

Tensor* Tensor::default_instance_ = NULL;

Tensor* Tensor::New(::google::protobuf::Arena* arena) const {
  Tensor* n = new Tensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tensor::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSubst.Tensor)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Tensor, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Tensor*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(opid_, tsid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Tensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GraphSubst.Tensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tsId;
        break;
      }

      // required int32 tsId = 2;
      case 2: {
        if (tag == 16) {
         parse_tsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tsid_)));
          set_has_tsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GraphSubst.Tensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GraphSubst.Tensor)
  return false;
#undef DO_
}

void Tensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GraphSubst.Tensor)
  // required int32 opId = 1;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opid(), output);
  }

  // required int32 tsId = 2;
  if (has_tsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tsid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GraphSubst.Tensor)
}

::google::protobuf::uint8* Tensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GraphSubst.Tensor)
  // required int32 opId = 1;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opid(), target);
  }

  // required int32 tsId = 2;
  if (has_tsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tsid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSubst.Tensor)
  return target;
}

int Tensor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GraphSubst.Tensor)
  int total_size = 0;

  if (has_opid()) {
    // required int32 opId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opid());
  }

  if (has_tsid()) {
    // required int32 tsId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tsid());
  }

  return total_size;
}
int Tensor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSubst.Tensor)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 opId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opid());

    // required int32 tsId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tsid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Tensor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Tensor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Tensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Tensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Tensor)
    MergeFrom(*source);
  }
}

void Tensor::MergeFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Tensor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opid()) {
      set_opid(from.opid());
    }
    if (from.has_tsid()) {
      set_tsid(from.tsid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Tensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tensor::CopyFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tensor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Tensor::Swap(Tensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tensor::InternalSwap(Tensor* other) {
  std::swap(opid_, other->opid_);
  std::swap(tsid_, other->tsid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Tensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tensor_descriptor_;
  metadata.reflection = Tensor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Tensor

// required int32 opId = 1;
bool Tensor::has_opid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Tensor::set_has_opid() {
  _has_bits_[0] |= 0x00000001u;
}
void Tensor::clear_has_opid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Tensor::clear_opid() {
  opid_ = 0;
  clear_has_opid();
}
 ::google::protobuf::int32 Tensor::opid() const {
  // @@protoc_insertion_point(field_get:GraphSubst.Tensor.opId)
  return opid_;
}
 void Tensor::set_opid(::google::protobuf::int32 value) {
  set_has_opid();
  opid_ = value;
  // @@protoc_insertion_point(field_set:GraphSubst.Tensor.opId)
}

// required int32 tsId = 2;
bool Tensor::has_tsid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Tensor::set_has_tsid() {
  _has_bits_[0] |= 0x00000002u;
}
void Tensor::clear_has_tsid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Tensor::clear_tsid() {
  tsid_ = 0;
  clear_has_tsid();
}
 ::google::protobuf::int32 Tensor::tsid() const {
  // @@protoc_insertion_point(field_get:GraphSubst.Tensor.tsId)
  return tsid_;
}
 void Tensor::set_tsid(::google::protobuf::int32 value) {
  set_has_tsid();
  tsid_ = value;
  // @@protoc_insertion_point(field_set:GraphSubst.Tensor.tsId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Operator::kTypeFieldNumber;
const int Operator::kInputFieldNumber;
const int Operator::kParaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Operator::Operator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GraphSubst.Operator)
}

void Operator::InitAsDefaultInstance() {
}

Operator::Operator(const Operator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GraphSubst.Operator)
}

void Operator::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Operator::~Operator() {
  // @@protoc_insertion_point(destructor:GraphSubst.Operator)
  SharedDtor();
}

void Operator::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Operator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operator_descriptor_;
}

const Operator& Operator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rules_2eproto();
  return *default_instance_;
}

Operator* Operator::default_instance_ = NULL;

Operator* Operator::New(::google::protobuf::Arena* arena) const {
  Operator* n = new Operator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Operator::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSubst.Operator)
  type_ = 0;
  input_.Clear();
  para_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Operator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GraphSubst.Operator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_input;
        break;
      }

      // repeated .GraphSubst.Tensor input = 2;
      case 2: {
        if (tag == 18) {
         parse_input:
          DO_(input->IncrementRecursionDepth());
         parse_loop_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_input()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_input;
        if (input->ExpectTag(26)) goto parse_loop_para;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .GraphSubst.Parameter para = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_para()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_para;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GraphSubst.Operator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GraphSubst.Operator)
  return false;
#undef DO_
}

void Operator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GraphSubst.Operator)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .GraphSubst.Tensor input = 2;
  for (unsigned int i = 0, n = this->input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->input(i), output);
  }

  // repeated .GraphSubst.Parameter para = 3;
  for (unsigned int i = 0, n = this->para_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->para(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GraphSubst.Operator)
}

::google::protobuf::uint8* Operator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GraphSubst.Operator)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .GraphSubst.Tensor input = 2;
  for (unsigned int i = 0, n = this->input_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->input(i), false, target);
  }

  // repeated .GraphSubst.Parameter para = 3;
  for (unsigned int i = 0, n = this->para_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->para(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSubst.Operator)
  return target;
}

int Operator::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSubst.Operator)
  int total_size = 0;

  // required int32 type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }
  // repeated .GraphSubst.Tensor input = 2;
  total_size += 1 * this->input_size();
  for (int i = 0; i < this->input_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input(i));
  }

  // repeated .GraphSubst.Parameter para = 3;
  total_size += 1 * this->para_size();
  for (int i = 0; i < this->para_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->para(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Operator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Operator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Operator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Operator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Operator)
    MergeFrom(*source);
  }
}

void Operator::MergeFrom(const Operator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Operator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  input_.MergeFrom(from.input_);
  para_.MergeFrom(from.para_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Operator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operator::CopyFrom(const Operator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->input())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->para())) return false;
  return true;
}

void Operator::Swap(Operator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Operator::InternalSwap(Operator* other) {
  std::swap(type_, other->type_);
  input_.UnsafeArenaSwap(&other->input_);
  para_.UnsafeArenaSwap(&other->para_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Operator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Operator_descriptor_;
  metadata.reflection = Operator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Operator

// required int32 type = 1;
bool Operator::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Operator::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Operator::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Operator::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 Operator::type() const {
  // @@protoc_insertion_point(field_get:GraphSubst.Operator.type)
  return type_;
}
 void Operator::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GraphSubst.Operator.type)
}

// repeated .GraphSubst.Tensor input = 2;
int Operator::input_size() const {
  return input_.size();
}
void Operator::clear_input() {
  input_.Clear();
}
const ::GraphSubst::Tensor& Operator::input(int index) const {
  // @@protoc_insertion_point(field_get:GraphSubst.Operator.input)
  return input_.Get(index);
}
::GraphSubst::Tensor* Operator::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:GraphSubst.Operator.input)
  return input_.Mutable(index);
}
::GraphSubst::Tensor* Operator::add_input() {
  // @@protoc_insertion_point(field_add:GraphSubst.Operator.input)
  return input_.Add();
}
::google::protobuf::RepeatedPtrField< ::GraphSubst::Tensor >*
Operator::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:GraphSubst.Operator.input)
  return &input_;
}
const ::google::protobuf::RepeatedPtrField< ::GraphSubst::Tensor >&
Operator::input() const {
  // @@protoc_insertion_point(field_list:GraphSubst.Operator.input)
  return input_;
}

// repeated .GraphSubst.Parameter para = 3;
int Operator::para_size() const {
  return para_.size();
}
void Operator::clear_para() {
  para_.Clear();
}
const ::GraphSubst::Parameter& Operator::para(int index) const {
  // @@protoc_insertion_point(field_get:GraphSubst.Operator.para)
  return para_.Get(index);
}
::GraphSubst::Parameter* Operator::mutable_para(int index) {
  // @@protoc_insertion_point(field_mutable:GraphSubst.Operator.para)
  return para_.Mutable(index);
}
::GraphSubst::Parameter* Operator::add_para() {
  // @@protoc_insertion_point(field_add:GraphSubst.Operator.para)
  return para_.Add();
}
::google::protobuf::RepeatedPtrField< ::GraphSubst::Parameter >*
Operator::mutable_para() {
  // @@protoc_insertion_point(field_mutable_list:GraphSubst.Operator.para)
  return &para_;
}
const ::google::protobuf::RepeatedPtrField< ::GraphSubst::Parameter >&
Operator::para() const {
  // @@protoc_insertion_point(field_list:GraphSubst.Operator.para)
  return para_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapOutput::kSrcOpIdFieldNumber;
const int MapOutput::kDstOpIdFieldNumber;
const int MapOutput::kSrcTsIdFieldNumber;
const int MapOutput::kDstTsIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapOutput::MapOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GraphSubst.MapOutput)
}

void MapOutput::InitAsDefaultInstance() {
}

MapOutput::MapOutput(const MapOutput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GraphSubst.MapOutput)
}

void MapOutput::SharedCtor() {
  _cached_size_ = 0;
  srcopid_ = 0;
  dstopid_ = 0;
  srctsid_ = 0;
  dsttsid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapOutput::~MapOutput() {
  // @@protoc_insertion_point(destructor:GraphSubst.MapOutput)
  SharedDtor();
}

void MapOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapOutput_descriptor_;
}

const MapOutput& MapOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rules_2eproto();
  return *default_instance_;
}

MapOutput* MapOutput::default_instance_ = NULL;

MapOutput* MapOutput::New(::google::protobuf::Arena* arena) const {
  MapOutput* n = new MapOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSubst.MapOutput)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MapOutput, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MapOutput*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(srcopid_, dsttsid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MapOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GraphSubst.MapOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 srcOpId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcopid_)));
          set_has_srcopid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dstOpId;
        break;
      }

      // required int32 dstOpId = 2;
      case 2: {
        if (tag == 16) {
         parse_dstOpId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dstopid_)));
          set_has_dstopid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_srcTsId;
        break;
      }

      // required int32 srcTsId = 3;
      case 3: {
        if (tag == 24) {
         parse_srcTsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srctsid_)));
          set_has_srctsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dstTsId;
        break;
      }

      // required int32 dstTsId = 4;
      case 4: {
        if (tag == 32) {
         parse_dstTsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dsttsid_)));
          set_has_dsttsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GraphSubst.MapOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GraphSubst.MapOutput)
  return false;
#undef DO_
}

void MapOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GraphSubst.MapOutput)
  // required int32 srcOpId = 1;
  if (has_srcopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->srcopid(), output);
  }

  // required int32 dstOpId = 2;
  if (has_dstopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dstopid(), output);
  }

  // required int32 srcTsId = 3;
  if (has_srctsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->srctsid(), output);
  }

  // required int32 dstTsId = 4;
  if (has_dsttsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dsttsid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GraphSubst.MapOutput)
}

::google::protobuf::uint8* MapOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GraphSubst.MapOutput)
  // required int32 srcOpId = 1;
  if (has_srcopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->srcopid(), target);
  }

  // required int32 dstOpId = 2;
  if (has_dstopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dstopid(), target);
  }

  // required int32 srcTsId = 3;
  if (has_srctsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->srctsid(), target);
  }

  // required int32 dstTsId = 4;
  if (has_dsttsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dsttsid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSubst.MapOutput)
  return target;
}

int MapOutput::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GraphSubst.MapOutput)
  int total_size = 0;

  if (has_srcopid()) {
    // required int32 srcOpId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->srcopid());
  }

  if (has_dstopid()) {
    // required int32 dstOpId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dstopid());
  }

  if (has_srctsid()) {
    // required int32 srcTsId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->srctsid());
  }

  if (has_dsttsid()) {
    // required int32 dstTsId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dsttsid());
  }

  return total_size;
}
int MapOutput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSubst.MapOutput)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 srcOpId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->srcopid());

    // required int32 dstOpId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dstopid());

    // required int32 srcTsId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->srctsid());

    // required int32 dstTsId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dsttsid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GraphSubst.MapOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MapOutput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.MapOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.MapOutput)
    MergeFrom(*source);
  }
}

void MapOutput::MergeFrom(const MapOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.MapOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcopid()) {
      set_srcopid(from.srcopid());
    }
    if (from.has_dstopid()) {
      set_dstopid(from.dstopid());
    }
    if (from.has_srctsid()) {
      set_srctsid(from.srctsid());
    }
    if (from.has_dsttsid()) {
      set_dsttsid(from.dsttsid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MapOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GraphSubst.MapOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOutput::CopyFrom(const MapOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.MapOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MapOutput::Swap(MapOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapOutput::InternalSwap(MapOutput* other) {
  std::swap(srcopid_, other->srcopid_);
  std::swap(dstopid_, other->dstopid_);
  std::swap(srctsid_, other->srctsid_);
  std::swap(dsttsid_, other->dsttsid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapOutput_descriptor_;
  metadata.reflection = MapOutput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapOutput

// required int32 srcOpId = 1;
bool MapOutput::has_srcopid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MapOutput::set_has_srcopid() {
  _has_bits_[0] |= 0x00000001u;
}
void MapOutput::clear_has_srcopid() {
  _has_bits_[0] &= ~0x00000001u;
}
void MapOutput::clear_srcopid() {
  srcopid_ = 0;
  clear_has_srcopid();
}
 ::google::protobuf::int32 MapOutput::srcopid() const {
  // @@protoc_insertion_point(field_get:GraphSubst.MapOutput.srcOpId)
  return srcopid_;
}
 void MapOutput::set_srcopid(::google::protobuf::int32 value) {
  set_has_srcopid();
  srcopid_ = value;
  // @@protoc_insertion_point(field_set:GraphSubst.MapOutput.srcOpId)
}

// required int32 dstOpId = 2;
bool MapOutput::has_dstopid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MapOutput::set_has_dstopid() {
  _has_bits_[0] |= 0x00000002u;
}
void MapOutput::clear_has_dstopid() {
  _has_bits_[0] &= ~0x00000002u;
}
void MapOutput::clear_dstopid() {
  dstopid_ = 0;
  clear_has_dstopid();
}
 ::google::protobuf::int32 MapOutput::dstopid() const {
  // @@protoc_insertion_point(field_get:GraphSubst.MapOutput.dstOpId)
  return dstopid_;
}
 void MapOutput::set_dstopid(::google::protobuf::int32 value) {
  set_has_dstopid();
  dstopid_ = value;
  // @@protoc_insertion_point(field_set:GraphSubst.MapOutput.dstOpId)
}

// required int32 srcTsId = 3;
bool MapOutput::has_srctsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MapOutput::set_has_srctsid() {
  _has_bits_[0] |= 0x00000004u;
}
void MapOutput::clear_has_srctsid() {
  _has_bits_[0] &= ~0x00000004u;
}
void MapOutput::clear_srctsid() {
  srctsid_ = 0;
  clear_has_srctsid();
}
 ::google::protobuf::int32 MapOutput::srctsid() const {
  // @@protoc_insertion_point(field_get:GraphSubst.MapOutput.srcTsId)
  return srctsid_;
}
 void MapOutput::set_srctsid(::google::protobuf::int32 value) {
  set_has_srctsid();
  srctsid_ = value;
  // @@protoc_insertion_point(field_set:GraphSubst.MapOutput.srcTsId)
}

// required int32 dstTsId = 4;
bool MapOutput::has_dsttsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MapOutput::set_has_dsttsid() {
  _has_bits_[0] |= 0x00000008u;
}
void MapOutput::clear_has_dsttsid() {
  _has_bits_[0] &= ~0x00000008u;
}
void MapOutput::clear_dsttsid() {
  dsttsid_ = 0;
  clear_has_dsttsid();
}
 ::google::protobuf::int32 MapOutput::dsttsid() const {
  // @@protoc_insertion_point(field_get:GraphSubst.MapOutput.dstTsId)
  return dsttsid_;
}
 void MapOutput::set_dsttsid(::google::protobuf::int32 value) {
  set_has_dsttsid();
  dsttsid_ = value;
  // @@protoc_insertion_point(field_set:GraphSubst.MapOutput.dstTsId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rule::kSrcOpFieldNumber;
const int Rule::kDstOpFieldNumber;
const int Rule::kMappedOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rule::Rule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GraphSubst.Rule)
}

void Rule::InitAsDefaultInstance() {
}

Rule::Rule(const Rule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GraphSubst.Rule)
}

void Rule::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rule::~Rule() {
  // @@protoc_insertion_point(destructor:GraphSubst.Rule)
  SharedDtor();
}

void Rule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rule_descriptor_;
}

const Rule& Rule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rules_2eproto();
  return *default_instance_;
}

Rule* Rule::default_instance_ = NULL;

Rule* Rule::New(::google::protobuf::Arena* arena) const {
  Rule* n = new Rule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSubst.Rule)
  srcop_.Clear();
  dstop_.Clear();
  mappedoutput_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Rule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GraphSubst.Rule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GraphSubst.Operator srcOp = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_srcOp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_srcop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_srcOp;
        if (input->ExpectTag(18)) goto parse_loop_dstOp;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .GraphSubst.Operator dstOp = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_dstOp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dstop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_dstOp;
        if (input->ExpectTag(26)) goto parse_loop_mappedOutput;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .GraphSubst.MapOutput mappedOutput = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mappedOutput:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mappedoutput()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_mappedOutput;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GraphSubst.Rule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GraphSubst.Rule)
  return false;
#undef DO_
}

void Rule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GraphSubst.Rule)
  // repeated .GraphSubst.Operator srcOp = 1;
  for (unsigned int i = 0, n = this->srcop_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->srcop(i), output);
  }

  // repeated .GraphSubst.Operator dstOp = 2;
  for (unsigned int i = 0, n = this->dstop_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dstop(i), output);
  }

  // repeated .GraphSubst.MapOutput mappedOutput = 3;
  for (unsigned int i = 0, n = this->mappedoutput_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mappedoutput(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GraphSubst.Rule)
}

::google::protobuf::uint8* Rule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GraphSubst.Rule)
  // repeated .GraphSubst.Operator srcOp = 1;
  for (unsigned int i = 0, n = this->srcop_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->srcop(i), false, target);
  }

  // repeated .GraphSubst.Operator dstOp = 2;
  for (unsigned int i = 0, n = this->dstop_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->dstop(i), false, target);
  }

  // repeated .GraphSubst.MapOutput mappedOutput = 3;
  for (unsigned int i = 0, n = this->mappedoutput_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->mappedoutput(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSubst.Rule)
  return target;
}

int Rule::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSubst.Rule)
  int total_size = 0;

  // repeated .GraphSubst.Operator srcOp = 1;
  total_size += 1 * this->srcop_size();
  for (int i = 0; i < this->srcop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->srcop(i));
  }

  // repeated .GraphSubst.Operator dstOp = 2;
  total_size += 1 * this->dstop_size();
  for (int i = 0; i < this->dstop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dstop(i));
  }

  // repeated .GraphSubst.MapOutput mappedOutput = 3;
  total_size += 1 * this->mappedoutput_size();
  for (int i = 0; i < this->mappedoutput_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mappedoutput(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Rule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Rule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Rule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Rule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Rule)
    MergeFrom(*source);
  }
}

void Rule::MergeFrom(const Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Rule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  srcop_.MergeFrom(from.srcop_);
  dstop_.MergeFrom(from.dstop_);
  mappedoutput_.MergeFrom(from.mappedoutput_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Rule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rule::CopyFrom(const Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rule::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->srcop())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->dstop())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->mappedoutput())) return false;
  return true;
}

void Rule::Swap(Rule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rule::InternalSwap(Rule* other) {
  srcop_.UnsafeArenaSwap(&other->srcop_);
  dstop_.UnsafeArenaSwap(&other->dstop_);
  mappedoutput_.UnsafeArenaSwap(&other->mappedoutput_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rule_descriptor_;
  metadata.reflection = Rule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rule

// repeated .GraphSubst.Operator srcOp = 1;
int Rule::srcop_size() const {
  return srcop_.size();
}
void Rule::clear_srcop() {
  srcop_.Clear();
}
const ::GraphSubst::Operator& Rule::srcop(int index) const {
  // @@protoc_insertion_point(field_get:GraphSubst.Rule.srcOp)
  return srcop_.Get(index);
}
::GraphSubst::Operator* Rule::mutable_srcop(int index) {
  // @@protoc_insertion_point(field_mutable:GraphSubst.Rule.srcOp)
  return srcop_.Mutable(index);
}
::GraphSubst::Operator* Rule::add_srcop() {
  // @@protoc_insertion_point(field_add:GraphSubst.Rule.srcOp)
  return srcop_.Add();
}
::google::protobuf::RepeatedPtrField< ::GraphSubst::Operator >*
Rule::mutable_srcop() {
  // @@protoc_insertion_point(field_mutable_list:GraphSubst.Rule.srcOp)
  return &srcop_;
}
const ::google::protobuf::RepeatedPtrField< ::GraphSubst::Operator >&
Rule::srcop() const {
  // @@protoc_insertion_point(field_list:GraphSubst.Rule.srcOp)
  return srcop_;
}

// repeated .GraphSubst.Operator dstOp = 2;
int Rule::dstop_size() const {
  return dstop_.size();
}
void Rule::clear_dstop() {
  dstop_.Clear();
}
const ::GraphSubst::Operator& Rule::dstop(int index) const {
  // @@protoc_insertion_point(field_get:GraphSubst.Rule.dstOp)
  return dstop_.Get(index);
}
::GraphSubst::Operator* Rule::mutable_dstop(int index) {
  // @@protoc_insertion_point(field_mutable:GraphSubst.Rule.dstOp)
  return dstop_.Mutable(index);
}
::GraphSubst::Operator* Rule::add_dstop() {
  // @@protoc_insertion_point(field_add:GraphSubst.Rule.dstOp)
  return dstop_.Add();
}
::google::protobuf::RepeatedPtrField< ::GraphSubst::Operator >*
Rule::mutable_dstop() {
  // @@protoc_insertion_point(field_mutable_list:GraphSubst.Rule.dstOp)
  return &dstop_;
}
const ::google::protobuf::RepeatedPtrField< ::GraphSubst::Operator >&
Rule::dstop() const {
  // @@protoc_insertion_point(field_list:GraphSubst.Rule.dstOp)
  return dstop_;
}

// repeated .GraphSubst.MapOutput mappedOutput = 3;
int Rule::mappedoutput_size() const {
  return mappedoutput_.size();
}
void Rule::clear_mappedoutput() {
  mappedoutput_.Clear();
}
const ::GraphSubst::MapOutput& Rule::mappedoutput(int index) const {
  // @@protoc_insertion_point(field_get:GraphSubst.Rule.mappedOutput)
  return mappedoutput_.Get(index);
}
::GraphSubst::MapOutput* Rule::mutable_mappedoutput(int index) {
  // @@protoc_insertion_point(field_mutable:GraphSubst.Rule.mappedOutput)
  return mappedoutput_.Mutable(index);
}
::GraphSubst::MapOutput* Rule::add_mappedoutput() {
  // @@protoc_insertion_point(field_add:GraphSubst.Rule.mappedOutput)
  return mappedoutput_.Add();
}
::google::protobuf::RepeatedPtrField< ::GraphSubst::MapOutput >*
Rule::mutable_mappedoutput() {
  // @@protoc_insertion_point(field_mutable_list:GraphSubst.Rule.mappedOutput)
  return &mappedoutput_;
}
const ::google::protobuf::RepeatedPtrField< ::GraphSubst::MapOutput >&
Rule::mappedoutput() const {
  // @@protoc_insertion_point(field_list:GraphSubst.Rule.mappedOutput)
  return mappedoutput_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RuleCollection::kRuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RuleCollection::RuleCollection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GraphSubst.RuleCollection)
}

void RuleCollection::InitAsDefaultInstance() {
}

RuleCollection::RuleCollection(const RuleCollection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GraphSubst.RuleCollection)
}

void RuleCollection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuleCollection::~RuleCollection() {
  // @@protoc_insertion_point(destructor:GraphSubst.RuleCollection)
  SharedDtor();
}

void RuleCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuleCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuleCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuleCollection_descriptor_;
}

const RuleCollection& RuleCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rules_2eproto();
  return *default_instance_;
}

RuleCollection* RuleCollection::default_instance_ = NULL;

RuleCollection* RuleCollection::New(::google::protobuf::Arena* arena) const {
  RuleCollection* n = new RuleCollection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RuleCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSubst.RuleCollection)
  rule_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RuleCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GraphSubst.RuleCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GraphSubst.Rule rule = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_rule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rule()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_rule;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GraphSubst.RuleCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GraphSubst.RuleCollection)
  return false;
#undef DO_
}

void RuleCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GraphSubst.RuleCollection)
  // repeated .GraphSubst.Rule rule = 1;
  for (unsigned int i = 0, n = this->rule_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rule(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GraphSubst.RuleCollection)
}

::google::protobuf::uint8* RuleCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GraphSubst.RuleCollection)
  // repeated .GraphSubst.Rule rule = 1;
  for (unsigned int i = 0, n = this->rule_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->rule(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSubst.RuleCollection)
  return target;
}

int RuleCollection::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSubst.RuleCollection)
  int total_size = 0;

  // repeated .GraphSubst.Rule rule = 1;
  total_size += 1 * this->rule_size();
  for (int i = 0; i < this->rule_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rule(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuleCollection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GraphSubst.RuleCollection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RuleCollection* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RuleCollection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.RuleCollection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.RuleCollection)
    MergeFrom(*source);
  }
}

void RuleCollection::MergeFrom(const RuleCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.RuleCollection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  rule_.MergeFrom(from.rule_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RuleCollection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GraphSubst.RuleCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleCollection::CopyFrom(const RuleCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.RuleCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleCollection::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->rule())) return false;
  return true;
}

void RuleCollection::Swap(RuleCollection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RuleCollection::InternalSwap(RuleCollection* other) {
  rule_.UnsafeArenaSwap(&other->rule_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RuleCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuleCollection_descriptor_;
  metadata.reflection = RuleCollection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RuleCollection

// repeated .GraphSubst.Rule rule = 1;
int RuleCollection::rule_size() const {
  return rule_.size();
}
void RuleCollection::clear_rule() {
  rule_.Clear();
}
const ::GraphSubst::Rule& RuleCollection::rule(int index) const {
  // @@protoc_insertion_point(field_get:GraphSubst.RuleCollection.rule)
  return rule_.Get(index);
}
::GraphSubst::Rule* RuleCollection::mutable_rule(int index) {
  // @@protoc_insertion_point(field_mutable:GraphSubst.RuleCollection.rule)
  return rule_.Mutable(index);
}
::GraphSubst::Rule* RuleCollection::add_rule() {
  // @@protoc_insertion_point(field_add:GraphSubst.RuleCollection.rule)
  return rule_.Add();
}
::google::protobuf::RepeatedPtrField< ::GraphSubst::Rule >*
RuleCollection::mutable_rule() {
  // @@protoc_insertion_point(field_mutable_list:GraphSubst.RuleCollection.rule)
  return &rule_;
}
const ::google::protobuf::RepeatedPtrField< ::GraphSubst::Rule >&
RuleCollection::rule() const {
  // @@protoc_insertion_point(field_list:GraphSubst.RuleCollection.rule)
  return rule_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace GraphSubst

// @@protoc_insertion_point(global_scope)
